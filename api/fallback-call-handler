import twilio from 'twilio';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  const {
    TWILIO_ACCOUNT_SID,
    TWILIO_AUTH_TOKEN,
    TWILIO_NUMBER,
  } = process.env;

  const { rep } = req.body;

  if (!TWILIO_ACCOUNT_SID || !TWILIO_AUTH_TOKEN || !TWILIO_NUMBER) {
    return res.status(500).json({ message: 'Missing environment variables' });
  }

  if (!rep) {
    return res.status(400).json({ message: 'Missing rep name in request body' });
  }

  const repDirectory = {
    anthony: { number: '+14158799000', conference: 'Conference_Anthony' },
    jared:   { number: '+19093409000', conference: 'Conference_Jared' },
    louie:   { number: '+14243439000', conference: 'Conference_Louie' },
    matt:    { number: '+15624529000', conference: 'Conference_Matt' },
    alex:    { number: '+18582409000', conference: 'Conference_Alex' },
    front_desk:    { number: '+17026753263000', conference: 'Conference_Front' }
  };

  const repKey = rep.toLowerCase();
  const repData = repDirectory[repKey];

  if (!repData) {
    return res.status(404).json({ message: `Rep '${rep}' not found` });
  }

  const client = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);

  try {
    const call = await client.calls.create({
      to: repData.number,
      from: TWILIO_NUMBER,
      twiml: `
        <Response>
          <Say>You are now connected with a potential investor.</Say>
          <Dial>
            <Conference 
              startConferenceOnEnter="true" 
              endConferenceOnExit="false" 
              waitUrl="http://twimlets.com/holdmusic?Bucket=com.twilio.music.classical">
              ${repData.conference}
            </Conference>
          </Dial>
        </Response>
      `.trim()
    });

    console.log('[TRANSFER] Call started to:', repData.number);
    res.status(200).json({ message: 'Transfer call initiated', sid: call.sid });
  } catch (error) {
    console.error('[TRANSFER] Error:', error);
    res.status(500).json({ message: 'Call failed', error: error.message });
  }
}
