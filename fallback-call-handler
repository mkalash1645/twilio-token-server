import twilio from 'twilio';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method Not Allowed' });
  }

  const {
    TWILIO_ACCOUNT_SID,
    TWILIO_AUTH_TOKEN,
    TWILIO_NUMBER,
  } = process.env;

  const { CallStatus } = req.body;

  if (!TWILIO_ACCOUNT_SID || !TWILIO_AUTH_TOKEN || !TWILIO_NUMBER) {
    return res.status(500).json({ message: 'Missing environment variables' });
  }

  if (CallStatus !== 'completed') {
    return res.status(200).json({ message: 'Call not completed, no fallback needed' });
  }

  const client = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);

  try {
    const fallbackCall = await client.calls.create({
      to: '+19493019000', // Fallback number
      from: TWILIO_NUMBER,
      twiml: `
        <Response>
          <Say>Connecting you to the caller.</Say>
          <Dial timeout="20">
            <Conference 
              startConferenceOnEnter="true"
              endConferenceOnExit="false"
              waitUrl="http://twimlets.com/holdmusic?Bucket=com.twilio.music.classical">
              Conference_Fallback
            </Conference>
          </Dial>
        </Response>
      `.trim(),
    });

    console.log('[FALLBACK] Fallback call started:', fallbackCall.sid);
    res.status(200).json({ message: 'Fallback call placed', sid: fallbackCall.sid });
  } catch (error) {
    console.error('[FALLBACK] Error placing fallback call:', error);
    res.status(500).json({ message: 'Failed to place fallback call', error: error.message });
  }
}
